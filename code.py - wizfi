import time
import board
import busio
import digitalio
from adafruit_wizfiatcontrol import adafruit_wizfiatcontrol

# Wi-Fi AP Configuration
SSID = "PicoHID_Network"
PASSWORD = "testest"
CHANNEL = 3
SECURITY = 3  # WPA2-Personal
HIDDEN = 0  # 1 = Hidden, 0 = Visible

# WizFi360 Pins
RX = board.GP5
TX = board.GP4
resetpin = digitalio.DigitalInOut(board.GP20)
rtspin = False

# Setup UART for WizFi360
uart = busio.UART(TX, RX, baudrate=115200, receiver_buffer_size=2048)

print("Initializing WizFi360...")
wizfi = adafruit_wizfiatcontrol.WizFi_ATcontrol(
    uart, 115200, reset_pin=resetpin, rts_pin=rtspin, debug=True
)

print("Resetting WizFi360...")
wizfi.hard_reset()

# Function to send AT commands manually
def send_at_command(command, delay=1):
    print(f"Sending: {command}")
    uart.write((command + "\r\n").encode())
    time.sleep(delay)

# Set WizFi360 to Access Point Mode
send_at_command("AT+CWMODE=2", delay=2)

# Start AP
ap_command = f'AT+CWSAP="{SSID}","{PASSWORD}",{CHANNEL},{SECURITY},4,{HIDDEN}'
send_at_command(ap_command, delay=3)

# Start a simple HTTP server on port 80
send_at_command('AT+CIPMUX=1', delay=2)  # Enable multiple connections
send_at_command('AT+CIPSERVER=1,80', delay=2)  # Start server on port 80

print(f"HTTP Server running at http://192.168.4.1")

# Loop to read HTTP requests
while True:
    send_at_command('AT+CIPRECVDATA?', delay=1)  # Check for incoming data
    if uart.in_waiting:
        response = uart.read(uart.in_waiting).decode("utf-8")
        print(f"Received: {response}")

        # Parse HTTP request
        if "+IPD" in response:
            try:
                request = response.split("GET ")[1].split(" ")[0]  # Extract GET request
                key = request.split("=")[1]  # Extract keycode
                print(f"Keycode received: {key}")

                # Send HTTP response
                send_at_command('AT+CIPSEND=0,17', delay=1)
                send_at_command('HTTP/1.1 200 OK\r\n\r\nKey Sent!', delay=1)
                send_at_command('AT+CIPCLOSE=0', delay=1)
            except:
                pass  # Ignore errors

    time.sleep(0.1)
